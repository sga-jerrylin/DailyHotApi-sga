"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Sparkles, TrendingUp, Brain, Zap, Settings } from "lucide-react"
import { AISettingsDialog } from "./ai-settings-dialog"

interface AISettings {
  provider: 'deepseek' | 'dify'
  deepseek: {
    apiKey: string
    model: string
  }
  dify: {
    baseUrl: string
    apiKey: string
  }
}

export function AIAnalysisPanel() {
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisText, setAnalysisText] = useState("")
  const [error, setError] = useState("")
  const [showSettings, setShowSettings] = useState(false)
  const [aiSettings, setAiSettings] = useState<AISettings>({
    provider: 'deepseek',
    deepseek: {
      apiKey: '',
      model: 'deepseek-chat'
    },
    dify: {
      baseUrl: '',
      apiKey: ''
    }
  })

  // ‰ªélocalStorageÂä†ËΩΩËÆæÁΩÆ
  useEffect(() => {
    const savedSettings = localStorage.getItem('ai-settings')
    if (savedSettings) {
      try {
        setAiSettings(JSON.parse(savedSettings))
      } catch (error) {
        console.error('Failed to load AI settings:', error)
      }
    }
  }, [])

  // Ëé∑ÂèñÁÉ≠ÁÇπÊï∞ÊçÆÂπ∂Ë∞ÉÁî®AIÂàÜÊûê
  const startAnalysis = async (analysisType: string = 'all') => {
    // Ê£ÄÊü•APIÈÖçÁΩÆ
    if (aiSettings.provider === 'deepseek' && !aiSettings.deepseek.apiKey) {
      setError("ËØ∑ÂÖàÂú®ËÆæÁΩÆ‰∏≠ÈÖçÁΩÆDeepSeek API Key")
      return
    }
    if (aiSettings.provider === 'dify' && (!aiSettings.dify.baseUrl || !aiSettings.dify.apiKey)) {
      setError("ËØ∑ÂÖàÂú®ËÆæÁΩÆ‰∏≠ÈÖçÁΩÆDify Base URLÂíåAPI Key")
      return
    }

    setIsAnalyzing(true)
    setAnalysisText("")
    setError("")

    try {
      // 1. Ëé∑ÂèñÁÉ≠ÁÇπÊï∞ÊçÆ - Ê†πÊçÆÂàÜÊûêÁ±ªÂûãÈÄâÊã©‰∏çÂêåÁöÑAPI
      const apiBase = process.env.NODE_ENV === 'development' ? 'http://localhost:6688' : window.location.origin
      let apiUrl = `${apiBase}/aggregate?group=source&per=5`

      // Ê†πÊçÆÂàÜÊûêÁ±ªÂûãË∞ÉÊï¥APIÂèÇÊï∞
      if (analysisType === 'tech') {
        apiUrl = `${apiBase}/aggregate?group=category&category=tech&per=10`
      } else if (analysisType === 'finance') {
        apiUrl = `${apiBase}/aggregate?group=category&category=finance&per=10`
      } else if (analysisType === 'news') {
        apiUrl = `${apiBase}/aggregate?group=category&category=news&per=10`
      } else if (analysisType === 'media') {
        apiUrl = `${apiBase}/aggregate?group=category&category=media&per=10`
      }

      const response = await fetch(apiUrl)
      const hotData = await response.json()

      if (!hotData.categories || hotData.categories.length === 0) {
        throw new Error("Êó†Ê≥ïËé∑ÂèñÁÉ≠ÁÇπÊï∞ÊçÆ")
      }

      // 2. ÊûÑÂª∫ÂàÜÊûêÊèêÁ§∫ËØç
      const prompt = buildAnalysisPromptFromAggregate(hotData.categories, analysisType)

      // 3. Ë∞ÉÁî®AI APIËøõË°åÊµÅÂºèÂàÜÊûê
      await callAIAPI(prompt)

    } catch (err) {
      setError(err instanceof Error ? err.message : "ÂàÜÊûêÂ§±Ë¥•")
      setIsAnalyzing(false)
    }
  }

  // ÊûÑÂª∫ÂàÜÊûêÊèêÁ§∫ËØç - Âü∫‰∫éaggregate APIÊï∞ÊçÆ
  const buildAnalysisPromptFromAggregate = (categories: any[], analysisType: string = 'all') => {
    const analysisTypeMap = {
      'all': 'ÂÖ®ÁΩëÁÉ≠ÁÇπ',
      'tech': 'ÁßëÊäÄÊñ∞Èóª',
      'finance': 'Ë¥¢Áªè',
      'news': 'ÂÆûÊó∂Êñ∞Èóª',
      'media': 'Êñ∞Â™í‰Ωì'
    }

    const analysisTypeName = analysisTypeMap[analysisType as keyof typeof analysisTypeMap] || 'ÂÖ®ÁΩëÁÉ≠ÁÇπ'

    let prompt = `‰Ω†ÊòØSGA AIÁÉ≠ÁÇπÂàÜÊûê‰∏ìÂÆ∂„ÄÇËØ∑Âü∫‰∫é‰ª•‰∏ã‰∏≠ÂõΩ‰∫íËÅîÁΩë${analysisTypeName}Êï∞ÊçÆËøõË°åÊ∑±Â∫¶ÂàÜÊûêÔºö

## Êï∞ÊçÆÊ∫êÊ¶ÇËßà
`

    let totalSources = 0
    categories.forEach((category) => {
      totalSources += category.data.length
      prompt += `### ${category.name}ÂàÜÁ±ª (${category.data.length}‰∏™Êï∞ÊçÆÊ∫ê)
`
      category.data.forEach((source: any, sourceIndex: number) => {
        prompt += `#### ${sourceIndex + 1}. ${source.title}
`
        if (source.data && Array.isArray(source.data)) {
          source.data.slice(0, 5).forEach((item: any, itemIndex: number) => {
            prompt += `${itemIndex + 1}. ${item.title}${item.hot ? ` (ÁÉ≠Â∫¶: ${item.hot})` : ''}
`
          })
        }
        prompt += `
`
      })
    })

    // Ê†πÊçÆÂàÜÊûêÁ±ªÂûãË∞ÉÊï¥ÂàÜÊûêË¶ÅÊ±Ç
    let analysisRequirements = ''
    if (analysisType === 'tech') {
      analysisRequirements = `
üî• ÁßëÊäÄÁÉ≠ÁÇπÂàÜÊûê - ËØÜÂà´ÂΩìÂâçÊúÄÁÉ≠Èó®ÁöÑÁßëÊäÄËØùÈ¢òÂíåÊäÄÊúØË∂ãÂäø
üöÄ ÊäÄÊúØÂàõÊñ∞ËØÜÂà´ - ÂèëÁé∞Êñ∞ÂÖ¥ÊäÄÊúØ„ÄÅ‰∫ßÂìÅÂèëÂ∏É„ÄÅË°å‰∏öÂèòÈù©
üì± ‰∫ßÂìÅÂä®ÊÄÅÂàÜÊûê - ÂàÜÊûêÁßëÊäÄÂÖ¨Âè∏‰∫ßÂìÅÊõ¥Êñ∞„ÄÅÂ∏ÇÂú∫Á≠ñÁï•
üî¨ Ë°å‰∏öË∂ãÂäøÈ¢ÑÊµã - Âü∫‰∫éÊï∞ÊçÆÈ¢ÑÊµãÁßëÊäÄË°å‰∏öÂèëÂ±ïÊñπÂêë
üí° ÊäïËµÑÊú∫‰ºöÊ¥ûÂØü - ËØÜÂà´ÁßëÊäÄÈ¢ÜÂüüÁöÑÊäïËµÑÁÉ≠ÁÇπÂíåÂïÜ‰∏öÊú∫‰ºö`
    } else if (analysisType === 'finance') {
      analysisRequirements = `
üí∞ Ë¥¢ÁªèÁÉ≠ÁÇπÂàÜÊûê - ËØÜÂà´ÂΩìÂâçÊúÄÂèóÂÖ≥Ê≥®ÁöÑË¥¢ÁªèËØùÈ¢ò
üìà Â∏ÇÂú∫Ë∂ãÂäøÂàÜÊûê - ÂàÜÊûêËÇ°Â∏Ç„ÄÅÊ±áÂ∏Ç„ÄÅÂïÜÂìÅÂ∏ÇÂú∫Âä®Âêë
üè¶ ÊîøÁ≠ñÂΩ±ÂìçËØÑ‰º∞ - ÂàÜÊûêË¥¢ÁªèÊîøÁ≠ñÂØπÂ∏ÇÂú∫ÁöÑÂΩ±Âìç
üíº ‰ºÅ‰∏öÂä®ÊÄÅËøΩË∏™ - ÂÖ≥Ê≥®ÈáçË¶Å‰ºÅ‰∏öÁöÑË¥¢Âä°Ë°®Áé∞ÂíåÊàòÁï•Ë∞ÉÊï¥
üîÆ ÁªèÊµéËµ∞ÂäøÈ¢ÑÊµã - Âü∫‰∫éÊï∞ÊçÆÈ¢ÑÊµãÁªèÊµéÂèëÂ±ïË∂ãÂäø`
    } else if (analysisType === 'news') {
      analysisRequirements = `
üì∞ ÂÆûÊó∂Êñ∞ÈóªÂàÜÊûê - ËØÜÂà´ÂΩìÂâçÊúÄÈáçË¶ÅÁöÑÊñ∞Èóª‰∫ã‰ª∂
üåç Á§æ‰ºöÁÉ≠ÁÇπËøΩË∏™ - ÂàÜÊûêÁ§æ‰ºöÂÖ≥Ê≥®Â∫¶È´òÁöÑ‰∫ã‰ª∂ÂíåËØùÈ¢ò
üî• ËàÜÊÉÖË∂ãÂäøÂàÜÊûê - ËØÑ‰º∞ÂÖ¨‰ºóÂØπÈáçË¶Å‰∫ã‰ª∂ÁöÑÂèçÂ∫îÂíåÊÉÖÁª™
‚ö° Á™ÅÂèë‰∫ã‰ª∂ÁõëÊéß - ËØÜÂà´ÂèØËÉΩ‰∫ßÁîüÈáçÂ§ßÂΩ±ÂìçÁöÑÁ™ÅÂèëÊñ∞Èóª
üìä ‰º†Êí≠ÂΩ±ÂìçËØÑ‰º∞ - ÂàÜÊûêÊñ∞Èóª‰∫ã‰ª∂ÁöÑ‰º†Êí≠ËåÉÂõ¥ÂíåÁ§æ‰ºöÂΩ±Âìç`
    } else if (analysisType === 'media') {
      analysisRequirements = `
üì± Êñ∞Â™í‰ΩìÁÉ≠ÁÇπÂàÜÊûê - ËØÜÂà´Á§æ‰∫§Â™í‰ΩìÂíåÂÜÖÂÆπÂπ≥Âè∞ÁöÑÁÉ≠Èó®ËØùÈ¢ò
üé¨ ÂÜÖÂÆπË∂ãÂäøËøΩË∏™ - ÂàÜÊûêÁü≠ËßÜÈ¢ë„ÄÅÁõ¥Êí≠„ÄÅÁ§æÂå∫ËÆ®ËÆ∫ÁöÑÊµÅË°åË∂ãÂäø
üë• Áî®Êà∑Ë°å‰∏∫Ê¥ûÂØü - ÂàÜÊûêÁî®Êà∑‰∫íÂä®Ê®°ÂºèÂíåÂÖ¥Ë∂£ÂÅèÂ•ΩÂèòÂåñ
üî• ÁóÖÊØí‰º†Êí≠ÂàÜÊûê - ËØÜÂà´ÂÖ∑ÊúâÁóÖÊØí‰º†Êí≠ÊΩúÂäõÁöÑÂÜÖÂÆπÂíåËØùÈ¢ò
üìà Âπ≥Âè∞ÁîüÊÄÅËßÇÂØü - ÂàÜÊûê‰∏çÂêåÊñ∞Â™í‰ΩìÂπ≥Âè∞ÁöÑÂÜÖÂÆπÁîüÊÄÅÂíåÁî®Êà∑ÁâπÂæÅ`
    } else {
      analysisRequirements = `
üî• ÁÉ≠ÁÇπÂÖ±ÊÄßÂàÜÊûê - ÊâæÂá∫Ë∑®Âπ≥Âè∞„ÄÅË∑®È¢ÜÂüüÁöÑÂÖ±ÂêåËØùÈ¢òÂíåË∂ãÂäø
üå± ËãóÂ§¥Ë∂ãÂäøËØÜÂà´ - ËØÜÂà´Ê≠£Âú®ÂÖ¥Ëµ∑‰ΩÜËøòÊú™ÂÆåÂÖ®ÁàÜÂèëÁöÑËØùÈ¢ò
üìä ÂàÜÁ±ªÁâπÂæÅÂàÜÊûê - ÂêÑÂàÜÁ±ª(ÁßëÊäÄ„ÄÅÊñ∞Â™í‰Ωì„ÄÅÂÆûÊó∂Êñ∞Èóª„ÄÅË¥¢Áªè)ÁöÑÁã¨ÁâπÁâπÂæÅ
üîÑ ‰º†Êí≠ËßÑÂæãÂàÜÊûê - ‰∏çÂêåÂπ≥Âè∞Èó¥ÁöÑËØùÈ¢ò‰º†Êí≠Êó∂Â∑ÆÂíåÁâπÁÇπ
üîÆ Êú™Êù•Ë∂ãÂäøÈ¢ÑÊµã - Âü∫‰∫éÂΩìÂâçÊï∞ÊçÆÈ¢ÑÊµãÊú™Êù•1-3Â§©ÁöÑÁÉ≠ÁÇπËµ∞Âêë`
    }

    prompt += `## ÂàÜÊûêË¶ÅÊ±Ç
Âü∫‰∫é‰ª•‰∏ä ${totalSources} ‰∏™Êï∞ÊçÆÊ∫êÁöÑ${analysisTypeName}Êï∞ÊçÆÔºåËØ∑‰ªé‰ª•‰∏ãÁª¥Â∫¶ËøõË°åÊ∑±Â∫¶ÂàÜÊûêÔºö
${analysisRequirements}

## ËæìÂá∫Ë¶ÅÊ±Ç
‚ö†Ô∏è ÈáçË¶ÅÔºöËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãÊ†ºÂºèËæìÂá∫Ôºå‰∏çË¶Å‰ΩøÁî®markdownËØ≠Ê≥ïÔºàÂ¶Ç**„ÄÅ##„ÄÅ-Á≠âÔºâÔºö

1. ‰ΩøÁî®‰∏∞ÂØåÁöÑemojiË°®ÊÉÖÁ¨¶Âè∑Â¢ûÂº∫ÂèØËØªÊÄß
2. Áî®ÁÆÄÊ¥ÅÁöÑÊÆµËêΩÂíåÊç¢Ë°åÁªÑÁªáÂÜÖÂÆπ
3. ÈÅøÂÖç‰ΩøÁî®‰ªª‰ΩïmarkdownÊ†ºÂºèÊ†áËÆ∞
4. ÈáçÁÇπÂÖ≥Ê≥®Êï∞ÊçÆËÉåÂêéÁöÑÊ∑±Â±ÇÂê´‰πâ„ÄÅÁ§æ‰ºöÊñáÂåñË∂ãÂäø„ÄÅÂïÜ‰∏öÊú∫‰ºöÂíåÈ£éÈô©„ÄÅÂÖ¨‰ºóÊÉÖÁª™ÂèòÂåñ
5. ËØ≠Ë®ÄË¶ÅÁîüÂä®ÊúâË∂£ÔºåÈÄÇÂêàÂú®ËÅäÂ§©ÁïåÈù¢ÊòæÁ§∫

Áé∞Âú®ÂºÄÂßã‰Ω†ÁöÑ${analysisTypeName}‰∏ì‰∏öÂàÜÊûêÔºö`

    return prompt
  }

  // Ë∞ÉÁî®AI APIËøõË°åÊµÅÂºèÂàÜÊûê
  const callAIAPI = async (prompt: string) => {
    try {
      if (aiSettings.provider === 'deepseek') {
        await callDeepSeekAPI(prompt)
      } else if (aiSettings.provider === 'dify') {
        await callDifyAPI(prompt)
      }
    } catch (error) {
      throw error
    }
  }

  // Ë∞ÉÁî®DeepSeek APIËøõË°åÊµÅÂºèÂàÜÊûê
  const callDeepSeekAPI = async (prompt: string) => {
    try {
      const response = await fetch('https://api.deepseek.com/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${aiSettings.deepseek.apiKey}`,
        },
        body: JSON.stringify({
          model: aiSettings.deepseek.model,
          messages: [
            {
              role: 'system',
              content: '‰Ω†ÊòØSGA AIÁÉ≠ÁÇπÂàÜÊûê‰∏ìÂÆ∂ÔºåÊìÖÈïø‰ªéÊµ∑ÈáèÁÉ≠ÁÇπÊï∞ÊçÆ‰∏≠ÂèëÁé∞Ë∂ãÂäø„ÄÅËØÜÂà´ËãóÂ§¥„ÄÅÈ¢ÑÊµãËµ∞Âêë„ÄÇ‰Ω†ÁöÑÂàÜÊûêÊ∑±Âàª„ÄÅÂáÜÁ°Æ„ÄÅÊúâÂâçÁûªÊÄß„ÄÇ'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          stream: true,
          temperature: 0.7,
          max_tokens: 2000,
        }),
      })

      if (!response.ok) {
        throw new Error(`DeepSeek APIÈîôËØØ: ${response.status}`)
      }

      await processStreamResponse(response)
    } catch (err) {
      throw new Error(`DeepSeek APIË∞ÉÁî®Â§±Ë¥•: ${err instanceof Error ? err.message : 'Êú™Áü•ÈîôËØØ'}`)
    }
  }

  // Ë∞ÉÁî®Dify APIËøõË°åÊµÅÂºèÂàÜÊûê
  const callDifyAPI = async (prompt: string) => {
    try {
      const response = await fetch(`${aiSettings.dify.baseUrl}/chat-messages`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${aiSettings.dify.apiKey}`,
        },
        body: JSON.stringify({
          inputs: {},
          query: prompt,
          response_mode: 'streaming',
          user: 'sga-user',
        }),
      })

      if (!response.ok) {
        throw new Error(`Dify APIÈîôËØØ: ${response.status}`)
      }

      await processDifyStreamResponse(response)
    } catch (err) {
      throw new Error(`Dify APIË∞ÉÁî®Â§±Ë¥•: ${err instanceof Error ? err.message : 'Êú™Áü•ÈîôËØØ'}`)
    }
  }

  // Â§ÑÁêÜDeepSeekÊµÅÂºèÂìçÂ∫î
  const processStreamResponse = async (response: Response) => {
    const reader = response.body?.getReader()
    const decoder = new TextDecoder()

    if (!reader) {
      throw new Error("Êó†Ê≥ïËØªÂèñÂìçÂ∫îÊµÅ")
    }

    while (true) {
      const { done, value } = await reader.read()
      if (done) break

      const chunk = decoder.decode(value)
      const lines = chunk.split('\n')

      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6)
          if (data === '[DONE]') {
            setIsAnalyzing(false)
            return
          }

          try {
            const parsed = JSON.parse(data)
            const content = parsed.choices?.[0]?.delta?.content
            if (content) {
              setAnalysisText(prev => prev + content)
            }
          } catch {
            // ÂøΩÁï•Ëß£ÊûêÈîôËØØÔºåÁªßÁª≠Â§ÑÁêÜ‰∏ã‰∏ÄË°å
          }
        }
      }
    }
  }

  // Â§ÑÁêÜDifyÊµÅÂºèÂìçÂ∫î
  const processDifyStreamResponse = async (response: Response) => {
    const reader = response.body?.getReader()
    const decoder = new TextDecoder()

    if (!reader) {
      throw new Error("Êó†Ê≥ïËØªÂèñÂìçÂ∫îÊµÅ")
    }

    while (true) {
      const { done, value } = await reader.read()
      if (done) break

      const chunk = decoder.decode(value)
      const lines = chunk.split('\n')

      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6)

          try {
            const parsed = JSON.parse(data)
            if (parsed.event === 'message' && parsed.answer) {
              setAnalysisText(prev => prev + parsed.answer)
            } else if (parsed.event === 'message_end') {
              setIsAnalyzing(false)
              return
            }
          } catch {
            // ÂøΩÁï•Ëß£ÊûêÈîôËØØÔºåÁªßÁª≠Â§ÑÁêÜ‰∏ã‰∏ÄË°å
          }
        }
      }
    }
  }

  return (
    <div className="px-6 py-12">
      <div className="mx-auto max-w-4xl">
        <Card className="bg-gradient-to-br from-slate-800/50 to-purple-900/20 border-purple-500/30 backdrop-blur-sm">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-gradient-to-r from-purple-600 to-cyan-600">
                  <Brain className="h-6 w-6 text-white" />
                </div>
                <div>
                  <CardTitle className="text-white text-xl">SGA AI ÁÉ≠ÁÇπË∂ãÂäøÂàÜÊûê</CardTitle>
                  <p className="text-gray-400 text-sm mt-1">ÂÆûÊó∂Êô∫ËÉΩÂàÜÊûê78‰∏™Êï∞ÊçÆÊ∫êÁÉ≠ÁÇπË∂ãÂäø</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="border-cyan-500/50 bg-cyan-500/10 text-cyan-300">
                  <Sparkles className="h-3 w-3 mr-1" />
                  AIÈ©±Âä®
                </Badge>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowSettings(true)}
                  className="border-gray-600 text-gray-300 hover:bg-gray-800/50 h-8 px-3"
                >
                  <Settings className="h-3 w-3 mr-1" />
                  ËÆæÁΩÆ
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              <Button
                onClick={() => startAnalysis('all')}
                disabled={isAnalyzing}
                className="bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white shadow-lg shadow-blue-500/25 hover:shadow-blue-500/40 transition-all duration-300 h-12"
              >
                {isAnalyzing ? (
                  <>
                    <Zap className="h-4 w-4 mr-2 animate-spin" />
                    ÂàÜÊûê‰∏≠...
                  </>
                ) : (
                  <>
                    <TrendingUp className="h-4 w-4 mr-2" />
                    ÂÖ®ÁΩëÂàÜÊûê
                  </>
                )}
              </Button>

              <Button
                onClick={() => startAnalysis('tech')}
                disabled={isAnalyzing}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-lg shadow-purple-500/25 hover:shadow-purple-500/40 transition-all duration-300 h-12"
              >
                {isAnalyzing ? (
                  <>
                    <Zap className="h-4 w-4 mr-2 animate-spin" />
                    ÂàÜÊûê‰∏≠...
                  </>
                ) : (
                  <>
                    <TrendingUp className="h-4 w-4 mr-2" />
                    ÁßëÊäÄÊñ∞ÈóªÂàÜÊûê
                  </>
                )}
              </Button>

              <Button
                onClick={() => startAnalysis('finance')}
                disabled={isAnalyzing}
                className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white shadow-lg shadow-green-500/25 hover:shadow-green-500/40 transition-all duration-300 h-12"
              >
                {isAnalyzing ? (
                  <>
                    <Zap className="h-4 w-4 mr-2 animate-spin" />
                    ÂàÜÊûê‰∏≠...
                  </>
                ) : (
                  <>
                    <TrendingUp className="h-4 w-4 mr-2" />
                    Ë¥¢ÁªèÂàÜÊûê
                  </>
                )}
              </Button>

              <Button
                onClick={() => startAnalysis('news')}
                disabled={isAnalyzing}
                className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white shadow-lg shadow-red-500/25 hover:shadow-red-500/40 transition-all duration-300 h-12"
              >
                {isAnalyzing ? (
                  <>
                    <Zap className="h-4 w-4 mr-2 animate-spin" />
                    ÂàÜÊûê‰∏≠...
                  </>
                ) : (
                  <>
                    <TrendingUp className="h-4 w-4 mr-2" />
                    ÂÆûÊó∂Êñ∞ÈóªÂàÜÊûê
                  </>
                )}
              </Button>

              <Button
                onClick={() => startAnalysis('media')}
                disabled={isAnalyzing}
                className="bg-gradient-to-r from-pink-600 to-rose-600 hover:from-pink-700 hover:to-rose-700 text-white shadow-lg shadow-pink-500/25 hover:shadow-pink-500/40 transition-all duration-300 h-12"
              >
                {isAnalyzing ? (
                  <>
                    <Zap className="h-4 w-4 mr-2 animate-spin" />
                    ÂàÜÊûê‰∏≠...
                  </>
                ) : (
                  <>
                    <TrendingUp className="h-4 w-4 mr-2" />
                    Êñ∞Â™í‰ΩìÂàÜÊûê
                  </>
                )}
              </Button>
            </div>

            {error && (
              <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-4">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-2 h-2 bg-red-400 rounded-full"></div>
                  <span className="text-red-400 text-sm font-semibold">ÂàÜÊûêÈîôËØØ</span>
                </div>
                <div className="text-red-300 text-sm">{error}</div>
              </div>
            )}

            {analysisText && (
              <div className="bg-slate-900/50 rounded-lg p-6 border border-cyan-500/20 backdrop-blur-sm">
                <div className="flex items-center gap-2 mb-4">
                  <div className={`w-2 h-2 rounded-full ${isAnalyzing ? 'bg-cyan-400 animate-pulse' : 'bg-green-400'}`}></div>
                  <span className={`text-sm font-mono ${isAnalyzing ? 'text-cyan-400' : 'text-green-400'}`}>
                    {isAnalyzing ? 'DeepSeek AI Ê≠£Âú®ÂàÜÊûê...' : 'DeepSeek AI ÂàÜÊûêÂÆåÊàê'}
                  </span>
                </div>
                <div className="text-gray-300 whitespace-pre-wrap text-sm leading-relaxed">
                  {analysisText}
                  {isAnalyzing && <span className="animate-pulse text-cyan-400">‚ñã</span>}
                </div>
              </div>
            )}


          </CardContent>
        </Card>
      </div>

      {/* AIËÆæÁΩÆÂØπËØùÊ°Ü */}
      <AISettingsDialog
        isOpen={showSettings}
        onClose={() => setShowSettings(false)}
        onSave={setAiSettings}
        currentSettings={aiSettings}
      />
    </div>
  )
}
